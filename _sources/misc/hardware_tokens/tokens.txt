Hardware Tokens
===============


My desk currently looks like a Yubikey graveyard.
I need to figure out which ones do what, and which ones
are worth keeping.
Some of them are way too old to be useful.

Using a hardware token with OpenSSH 8.2+
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The documentation isn't simple enough for me.
It's written as it should be (product agnostic), but I need something simpler.
So, writing these directions for me.

Yubikey features
^^^^^^^^^^^^^^^^

These are the features of the yubikeys on my desk.

+-----------+----------+-----+-------+-----+--------+ 
| version   | firmware | OTP | FIDO2 | PIV | notes  |
+===========+==========+=====+=======+=====+========+
| nano      | 2.3.0    | yes |   no  |  no | :(     |
+-----------+----------+-----+-------+-----+--------+ 
| v5 nfc    | 5.2.4    | yes |  yes  | yes | have 2 |
+-----------+----------+-----+-------+-----+--------+ 
| wired mag | 4.3.7    | yes |   no  | yes |        |
+-----------+----------+-----+-------+-----+--------+ 
| unknown   | 2.3.1    | yes |   no  |  no |        |
+-----------+----------+-----+-------+-----+--------+ 
| unknown   | 2.1.1    | yes |   no  |  no |        |
+-----------+----------+-----+-------+-----+--------+ 
| unknown   | 2.0.2    | yes |   no  |  no |        |
+-----------+----------+-----+-------+-----+--------+ 

Yubikey 5 NFC
^^^^^^^^^^^^^

I used the `Yubikey Manager <https://www.yubico.com/products/services-software/download/yubikey-manager>`_
to change the FIDO2 pin.
I ran it in Windows 10 with administrator privs (won't be able to access fido without them).

Once the pin was set I was able to use ssh-keygen to create an `ed25519-sk` key with the resident option.

.. code-block:: console

   $ ssh-keygen -t ed25519-sk -O resident

It should prompt for the pin, and then the Y will flash for confirmation of presense.
It may prompt to be touched, it may not.
The flashing Y is a sign to touch it.

As usual the public key should be added to the user's `~/.ssh/authorized_keys`.

To use the resident key, use `ssh-add` to add it to `ssh-agent`.
It will prompt for the pin.

.. code-block:: console

   $ ssh-add -K

Using that key to connect to a system will require a touch (look for the flashing Y).


Solo Key
^^^^^^^^

.. warning::

   I really need to play with this more.
   I'm sure I just haven't figured out the secret sauce.

`Solo Key <https://solokeys.com/>`_ works with FIDO2, but only with ecdsa-sk keys.
RIP `ed25519`.

Used Windows `Sign-In Options` to change the pin since the python program doesn't work
on OpenBSD.

Creating resident keys `ssh-keygen -t ecdsa-sk -O resident` currently fails for me with:
`Key enrollment failed: requested feature not supported`


Latest attempt:

.. code-block:: console

   $ ssh-keygen -t ecdsa-sk -O resident -v
   Generating public/private ecdsa-sk key pair.
   You may need to touch your authenticator to authorize key generation.
   Enter PIN for authenticator:
   debug1: start_helper: starting /usr/libexec/ssh-sk-helper
   debug1: sshsk_enroll: provider "internal", device "(null)", application "ssh:", userid "(null)", flags 0x21, challenge len 0 with-pin
   debug1: sshsk_enroll: using random challenge
   debug1: sk_probe: 1 device(s) detected
   debug1: sk_probe: selecting sk by touch
   debug1: ssh_sk_enroll: using device /dev/fido/0
   debug1: ssh_sk_enroll: /dev/fido/0 does not support credprot, refusing to create unprotected resident/verify-required key
   debug1: sshsk_enroll: provider "internal" returned failure -2
   debug1: ssh-sk-helper: Enrollment failed: requested feature not supported
   debug1: ssh-sk-helper: reply len 8
   debug1: client_converse: helper returned error -59
   Key enrollment failed: requested feature not supported

